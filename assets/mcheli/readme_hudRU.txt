2016/03/28

;***********************************************************************************
;■Настройки HUD Файл hud/***.txt
;***********************************************************************************

; ★ Важное ★
; HUD можно перезагрузить во время работы Minecraft.
; [ Сядьте в транспорт → Нажмите R для экрана поставок → MOD Option → Разработка → Перезагрузить все HUD ]
; Перезагрузка текстур использует стандартную функцию Minecraft, а не Helicopter Mod.
; [ Нажмите Esc для открытия игрового меню → Настройки → Пакеты ресурсов → Готово ]

;************************************************************************************************************
; Важно только порядка файлов настройки HUD.
; Обработка выполняется в указанном порядке в конфигурационном файле, и это становится порядком рисования.

;************************************************************************************************************
; О формулах
; ■ Формулы можно применять к значениям, кроме частей данных DrawString и DrawCenteredString.
;   Пример: Color = 123 + 456
; ■ Вы можете использовать шестнадцатеричные числа в формулах, добавив # или 0x перед числом.
;   Пример: Color = #123 + 0x456 + 789
; ■ Вы можете использовать "переменные" в формулах.
;   Пример: Color = hp_rto * 100
;       hp_rto - это оставшаяся прочность транспортного средства, от 0.0 до 1.0. Умножив на 100, получаем значение от 0.0 до 100.0.
; ■ Можно использовать условия в формулах.
;   Формат: условие ? значение если верно : значение если неверно
;   Пример: Color = hp_rto > 0.2 ? 0xFFFFFFFF : 0x00000000
;       Когда hp_rto больше 0.2, цвет будет установлен в 0xFFFFFFFF, и если оно будет 0.2 или ниже, он будет установлен в 0x00000000.

; "Список переменных"
; center_x    : Координата X центра экрана
; center_y    : Координата Y центра экрана
; width       : Ширина экрана
; height      : Высота экрана
; yaw         : Поворот транспортного средства по горизонтали (-180.0 до 180.0)
; pitch       : Поворот транспортного средства по вертикали (-90.0 до 90.0)
; roll        : Ролик транспортного средства (-180.0 до 180.0)
; plyr_yaw    : Поворот игрока по горизонтали (-180.0 до 180.0)
; plyr_pitch  : Поворот игрока по вертикали (-90.0 до 90.0)
; altitude    : Высота транспортного средства (0 или больше), расстояние от транспортного средства до блока снизу (не может быть отрицательным)
; sea_alt     : Высота транспортного средства (0 или больше), расстояние от уровня моря (не может быть отрицательным)
; hp          : Оставшаяся прочность транспортного средства (0 или больше)
; max_hp      : Максимальная прочность транспортного средства (0 или больше)
; hp_rto      : Оставшаяся прочность транспортного средства в процентах (0.0 до 1.0)
; throttle    : Текущая скорость транспортного средства (0.0 до 1.0)
; pos_x       : Координата X транспортного средства
; pos_y       : Координата Y транспортного средства
; pos_z       : Координата Z транспортного средства
; motion_x    : Ускорение транспортного средства в направлении X
; motion_y    : Ускорение транспортного средства в направлении Y
; motion_z    : Ускорение транспортного средства в направлении Z
; fuel        : Оставшийся уровень топлива транспортного средства (0.0 до 1.0)
; low_fuel    : Индикация низкого уровня топлива, мигает между 0 и 1, когда топлива мало (0 = топливо есть, 1 = мало топлива)
; stick_x     : Движение джойстика в направлении X (-1.0 до 1.0)
; stick_y     : Движение джойстика в направлении Y (-1.0 до 1.0)
; reloading   : Состояние перезарядки оружия (0 = не перезаряжается, 1 = перезаряжается)
; reload_time : Оставшееся время перезарядки (0.0 до 1.0), 0.0 означает завершение перезарядки
; wpn_heat    : Температура оружия (0.0 до 1.0)
; is_heat_wpn : Использует ли оружие температуру (0 = нет, 1 = да)
; dsp_mt_dist : Показывать ли расстояние удара (0 = не показывать, 1 = показывать)
; mt_dist     : Расстояние удара (не может быть вычислено, если меньше 0.0)
; have_radar  : Есть ли радар (0 = нет радара, 1 = радар есть)
; radar_rot   : Угол вращения радара. Позиция сущности обновляется после полного вращения радара.
; vtol_stat   : Только для самолётов. 0 = обычный режим, 1 = переключение на VTOL, 2 = в режиме VTOL
; free_look   : 0 = обычный режим, 1 = в режиме свободного обзора
; cam_mode    : 0 = обычный, 1 = Ночное видение, 2 = Тепловизионное зрение
; cam_zoom    : Уровень увеличения камеры. 1.0 ~ 10.0
; auto_pilot  : 0 = обычный режим, 1 = в режиме автопилота
; have_flare  : Есть ли выбрасыватель фаеров (0 = нет, 1 = есть)
; can_flare   : Могут ли использоваться фаеры (0 = можно использовать, 1 = готовы, но недоступны)
; sight_type  : Тип прицела (0 = нет, 1 = MoveSight, 2 = MissileSight)
; lock        : Состояние блокировки ракеты (0.0 до 1.0)
; color       : Текущая настройка цвета (0x00000000 ~ 0xFFFFFFFF)
; inventory   : Количество ячеек инвентаря (0 ~ 54)
; hovering    : Состояние зависания (0 = не зависает, 1 = зависает)
; is_uav      : Является ли это БПЛА (0 = не БПЛА, 1 = БПЛА)
; uav_fs      : Сила сигнала БПЛА, чем больше значение, тем ближе к станции БПЛА (0.0 ~ 1.0)
; gunner_mode : Находится ли в режиме стрелка (0 = обычный режим, 1 = режим стрелка)
; time        : Время в игре Minecraft (1 день = 24000 отсчётов, 0 = 6:00, 6000 = полдень)
; test_mode   : Находится ли в тестовом режиме (0 = обычный режим, 1 = тестовый режим)

;************************************************************************************************************
; Вызов других файлов рисования HUD
; Указав имя текстового файла HUD, будет выполнен процесс рисования этого конфигурационного файла.
;
; Например, если указано Call = common_pilot, будет выполнен common_pilot.txt.
; Также можно вызывать дополнительные файлы в конфигурации, но невозможно вызвать один и тот же файл дважды.
; Например, если в heli.txt указано Call = heli, он будет проигнорирован, так как heli.txt уже выполняется.
; Также, если в heli.txt указано Call = plane, а в plane.txt указано Call = heli,
; heli.txt будет проигнорирован, так как он уже выполняется.

Call = common_pilot

;************************************************************************************************************
; Завершение текущего рисования HUD
;
; Если вызвано через Call, процесс вернется к вызывающему файлу.
; Когда heli.txt вызывает uav_fs.txt, и используется Exit в uav_fs.txt, рисование uav_fs завершится,
; и следующая строка в heli.txt, где был вызван uav_fs.txt, продолжит выполнение.
;
Exit


;************************************************************************************************************
; Условные операторы
; Выполнять обработку только если выполнено указанное условие
;
; Если условие не равно 0, выполнятся process1, process2 и process3.
; Если условие равно 0, process1, process2 и process3 не выполнятся.
; Если = условие
;     process1
;     process2
;     process3
; EndIf
; Вложенные If не поддерживаются (нельзя вложить один If в другой между If и EndIf).
;
; В примере ниже, если is_heat_wpn равно 1, будут выполнены Color и DrawRect.
If = is_heat_wpn==1
    Color = 0xFF28d448
    DrawRect = -145, 57, 43, 10
EndIf


;************************************************************************************************************
; Настройки цвета
; После установки цвета, последующий текст или линии будут нарисованы с этим цветом.
;
; Есть 2 способа задать цвет.
; 1. Указав 1 параметр
; 2. Указав 4 параметра
;
; Если установка с 1 параметром: порядок - прозрачность, красный, зеленый, синий.
; Пример: 0xAABBCCDD означает прозрачность=AA, красный=BB, зеленый=CC, синий=DD
;
; Если установка с 4 параметрами: порядок - прозрачность, красный, зеленый, синий.
; Пример: 12, 34, 56, 78 означает прозрачность=12, красный=34, зеленый=56, синий=78
;
; Можно указывать как в шестнадцатеричной, так и в десятичной системе.
; Пример: следующие настройки все валидны:
Color = 0xFFFFFFFF
Color = #FFFFFFFF
Color = 0xFF,  40, 212,  72


;************************************************************************************************************
; Отображение текстовых строк
; DrawString: Рисует текст от указанных координат вправо
; DrawCenteredString: Рисует текст, выровненный по центру относительно указанных координат
;
; Параметр 1 = X координата относительно центра экрана
; Параметр 2 = Y координата относительно центра экрана
; Параметр 3 = Формат отображения (стиль printf или String.format, запятые не допускаются)
;              Количество символов % должно совпадать с количеством последующих параметров.
; Параметры 4 и далее = ★ Данные (необязательные, без верхнего ограничения)
;
; Пример (Высота): DrawString = -20,  20, "Привет"
;                     Отобразит строку "Привет" на экране.
;
; Пример (Высота): DrawString =  0,  40, "[ %3d ]", ALTITUDE
;                     Отобразит ALTITUDE (высоту) как 3-значное число → [ 123 ]
;
; Пример (Дата): DrawString =  0, -30, "%tY/%tm/%td", DATE, DATE, DATE
;                 Отобразит DATE (дату) в формате с разделителем / → 2014/10/11
;
; ★ Данные (не чувствительны к регистру)
; Данные не могут содержать вычислений.
;
; Как показано ниже, %s, %d, %f специфичны для каждого типа данных. Однако, можно указать количество знаков между % и буквой.
; Например, %f отобразит неопределенное количество знаков после запятой → 123.45678
; %.2f всегда отобразит 2 знака после запятой → 123.45
; %.0f → 123    %.1f → 123.4    %.2f → 123.45
; То же самое касается %d. Для подробностей можно обратиться к документам по printf.
;
;  НАЗВАНИЕ    : %s : Отображает название транспортного средства (такое же, как название предмета)
;  ВЫСОТА      : %d : Отображает высоту как целое число.
;  ДАТА        : %tY %tm %td %td %tH %tM %tS ...
;              : Отображает текущую дату и время. %tY=Год, %tm=Месяц, %td=День, %tH=Час, %tM=Минута, %tS=Секунда
;  ВРЕМЯ_MC    : %d : Отображает время Minecraft в часах. 0-23. Время Minecraft в 72 раза быстрее реального.
;  МИНУТЫ_MC   : %d : Отображает время Minecraft в минутах. 0-59.
;  СЕКУНДЫ_MC  : %d : Отображает время Minecraft в секундах. 0-59.
;  МАКС_ЗДОРОВЬЕ: %d : Отображает максимальную прочность как целое число.
;  ЗДОРОВЬЕ    : %d : Отображает оставшуюся прочность как целое число.
;  ПРОЦЕНТ_ЗДОРОВЬЯ : %f : Отображает оставшийся процент как десятичное число (100.0-0.0).
;  ГАЗ         : %f : Отображает уровень газа как десятичное число (100.0-0.0).
;  ПОЗ_X       : %f : Отображает X координату транспортного средства как десятичное число.
;  ПОЗ_Y       : %f : Отображает Y координату транспортного средства как десятичное число.
;  ПОЗ_Z       : %f : Отображает Z координату транспортного средства как десятичное число.
;  УСКОРЕНИЕ_X : %f : Отображает ускорение по оси X как десятичное число.
;  УСКОРЕНИЕ_Y : %f : Отображает ускорение по оси Y как десятичное число.
;  УСКОРЕНИЕ_Z : %f : Отображает ускорение по оси Z как десятичное число.
;  УГОЛ_АЗИМУТА: %f : Отображает угол азимута транспортного средства как десятичное число.
;  УГОЛ_ПОКАЗАНИЯ: %f : Отображает угол наклона транспортного средства как десятичное число.
;  УГОЛ_РОЛЛА : %f : Отображает угол крена транспортного средства как десятичное число.
;  УГОЛ_ПЛЕЙЕРА: %f : Отображает угол азимута игрока как десятичное число.
;  УГОЛ_ПОКАЗАНИЯ_ПЛЕЙЕРА: %f : Отображает угол наклона игрока как десятичное число.
;  ИНВЕНТАРЬ  : %d : Отображает количество предметов в инвентаре транспортного средства.
;  ОРУЖИЕ_НАЗВАНИЕ: %s : Отображает название текущего оружия.
;  ОРУЖИЕ_АММО : %s : Отображает текущий счетчик патронов для выбранного оружия.
;  ОРУЖИЕ_ОСТ_АММО : %s : Отображает оставшиеся патроны для выбранного оружия.
;  СОСТОЯНИЕ_ПЕРЕЗАРЯДКИ : %f : Отображает состояние перезарядки как десятичное число (100.0-0.0).
;  ОСТ_ВРЕМЯ_ПЕРЕЗАРЯДКИ : %f : Отображает оставшееся время перезарядки как десятичное число (0.0-).
;  МИН_РАССТОЯНИЕ_МОРТАРЫ : %f : Отображает расстояние до мортиры (если меньше 0.0, расчет невозможен).
;  ВЕРСИЯ_MC  : %s : Отображает версию Minecraft.
;  ВЕРСИЯ_МОДА : %s : Отображает версию мода.
;  НАЗВАНИЕ_МОДА : %s : Всегда отображает "MC Helicopter MOD".
;  TVM_ПОЗ_X   : %f : Отображает X координату ТВ ракеты.
;  TVM_ПОЗ_Y   : %f : Отображает Y координату ТВ ракеты.
;  TVM_ПОЗ_Z   : %f : Отображает Z координату ТВ ракеты.
;  TVM_РАССТОЯНИЕ: %f : Отображает расстояние между ТВ ракетой и транспортным средством.
;  УРОВЕНЬ_КАМЕРЫ: %f : Отображает уровень зума камеры.
;  РАССТОЯНИЕ_УАВ : %f : Отображает расстояние до станции UAV.
;  КЛАВИША_GUI : %s : Отображает название клавиши GUI (по умолчанию клавиша R).
;
DrawCenteredString = 0,  40, "[ %3d ]", ALTITUDE
→ Если ALTITUDE равно 12, на экране отобразится [  12 ] как 3-значное число. Поскольку 12 состоит из 2 цифр, место для сотен будет пустым.
DrawString         = 0,  30, "%tY %tm %td  [ %02d:%02d:%02d ]", DATE, DATE, DATE, MC_THOR, MC_TMIN, MC_TSEC
→ Если время в игре 12:34:56 24 октября 2014 года, на экране отобразится 2014 10 24  [ 12:34:56 ].
DrawString         = 0,  20, "%3d/%3d  = %.1f%%", HP, MAX_HP, HP_PER
→ Если текущее здоровье 50, а максимальное здоровье 100, на экране отобразится  50/100  = 50%.
DrawString         = 0,  10, "[ %s ]", name
→ Если транспортное средство это AH-64, на экране отобразится AH-64D Apache Longbow.
DrawCenteredString = 0, -10, "HUD Test"
→ Если данные не предоставлены, на экране всегда будет отображаться HUD Test.


;************************************************************************************************************
; Отображение текстуры
; Рекомендуемый размер текстуры 256x256. Параметры 2 и далее могут быть целыми числами или десятичными числами.
; Параметр 1: Имя текстуры (без расширения, файл в assets\mcheli\textures\gui)
; Параметр 2: X-координата от центра экрана
; Параметр 3: Y-координата от центра экрана
; Параметр 4: Ширина на экране
; Параметр 5: Высота на экране
; Параметр 6: X-координата для чтения текстуры
; Параметр 7: Y-координата для чтения текстуры
; Параметр 8: Ширина для чтения текстуры
; Параметр 9: Высота для чтения текстуры
; Параметр 10: Угол поворота на экране (необязательный)
DrawTexture = heli_hud, -100.0, 20, 50, 20, 0, 0, 64, 64, 90.0


;************************************************************************************************************
; Отображение прямоугольника
; Параметр 1: X-координата от центра экрана
; Параметр 2: Y-координата от центра экрана
; Параметр 3: Ширина на экране
; Параметр 4: Высота на экране
DrawRect = -20, -30, 40*throttle, -20


;************************************************************************************************************
; Отображение линии
; Если параметры 5 и далее указаны, будут нарисованы несколько линий.
; 1, 2 → 3, 4 → 5, 6 → 7, 8 ...
; Параметры 1-4 обязательны, 5 и далее опциональны, если нужно.
; Параметр 1: X-координата от центра экрана
; Параметр 2: Y-координата от центра экрана
; Параметр 3: X-координата от центра экрана
; Параметр 4: Y-координата от центра экрана
; Параметры 5 и далее: X-координата, Y-координата, X-координата, Y-координата...
DrawLine = -40, 30, 40, 30
DrawLine = -20, -30, -20+40*throttle, -30, -20+40*throttle, -20, -20, -20, -20, -30


;************************************************************************************************************
; Рисование пунктирной линии
; Если параметры с 7-го и далее указаны, будет нарисовано несколько пунктирных линий.
; 3, 4 → 5, 6 → 7, 8 ...
; Параметры 1-4 обязательны, 5 и далее опциональны, если необходимо.
; Параметр 1: Фактор для glLineStipple
; Параметр 2: Шаблон для glLineStipple
; Параметр 3: X-координата от центра экрана
; Параметр 4: Y-координата от центра экрана
; Параметр 5: X-координата от центра экрана
; Параметр 6: Y-координата от центра экрана
; Параметры с 7-го и далее: X-координата, Y-координата, X-координата, Y-координата...
DrawLineStipple = 0xF0F0, 1, -40, 30, 40, 30
DrawLineStipple = 0xFF00, 1, -20, -30, -20+40*throttle, -30, -20


;************************************************************************************************************
; Рисование позиций объектов (радар)
; DrawEntityRadar рисует не-монстров, DrawEnemyRadar рисует монстров
; Параметр 1: Угол поворота
; Параметр 2: X-координата от центра экрана
; Параметр 3: Y-координата от центра экрана
; Параметр 4: Ширина
; Параметр 5: Высота
DrawEntityRadar = plyr_yaw, 40, 30, 32, 32
DrawEnemyRadar = plyr_yaw, 40, 30, 32, 32


;************************************************************************************************************
; Рисование угловых делений
; DrawGraduationYaw: Горизонтальные деления угла поворота
; DrawGraduationPitch1: Вертикальные деления угла поворота
; DrawGraduationPitch2: Вертикальные и ролловые деления углов
; Параметр 1: Угол поворота
; Параметр 2: Угол ролла
; Параметр 3: X-координата от центра экрана
; Параметр 4: Y-координата от центра экрана
DrawGraduationYaw = plyr_yaw, 0, 0, -100
DrawGraduationPitch1 = plyr_pitch, 0, 0, 0
DrawGraduationPitch2 = plyr_pitch, -roll, 0, 0


;************************************************************************************************************
; Рисование разницы углов между игроком и самолетом
; Маленький прямоугольник, показывающий, куда смотрит игрок относительно самолета
; Параметр 1: X-координата от центра экрана
; Параметр 2: Y-координата от центра экрана
DrawCameraRot = 0, 60
